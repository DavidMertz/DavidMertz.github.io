#!/usr/bin/env -S uvx --with pyyaml python@3.13
import io
from os.path import dirname
from pathlib import Path
import yaml

INFO = {
    "Artist": None,
    "Culture": None,
    "Description": None,
    "Height (frame)": None,
    "Height (work)": None,
    "Medium": None,
    "Sequence": None,
    "Source": None,
    "Title": None,
    "Width (frame)": None,
    "Width (work)": None,
    "Year": None,
}

style = """
dl {
    border: 0px;
    padding: 0.5em;
}
dt {
    float: left;
    clear: left;
    width: 10em;
    text-align: right;
    font-weight: bold;
    color: green;
    margin-right: 0.5em;
}
dt::after {
    content: ":";
}
dd {
    margin: 0 0 0 110px;
    padding: 0 0 0.5em 0;
}
"""

filter = """
function filter() {
  const term = document.getElementById('filter-picker').value;
  const works = document.getElementsByClassName('ITEM');
  for (var i = 0; i < works.length; i++) {
    const filters = works[i].getAttribute('filters');
    if (term === "ALL") {
      works[i].style.display = "block";
    } else if (works[i].getAttribute('filters').includes(term)) {
      works[i].style.display = "block";
    } else {
      works[i].style.display = "none";
    }
  }
}
"""

head = f"""<html>
<head>
<style>{style}</style>
<script type="text/javascript">{filter}</script>
<title>Artwork Collection: Constant/Mertz/Sushinsky</title>
</head>
"""

picker = """
<form>
<select name="list" id="filter-picker" onchange="filter()">
    <option value="ALL">All Artworks</option>
    [[SELECTORS]]
</select>
</form>
"""


def add_selectors(selectors, html):
    options = ""
    for value, text in sorted(selectors.items()):
        if value:  # Skip empty values
            options += f"<option value='{value}'>{text}</option>"

    return html.replace("[[SELECTORS]]", options)


def htmlify(data):
    out = io.StringIO()
    print(head, file=out)
    print("<body>", file=out)
    print("<h1>Artwork Collection: Constant/Mertz/Sushinsky</h1>", file=out)
    print(picker, file=out)
    selectors = {}
    # Print each work's metadata and images in separate <dl> elements
    # Images are displayed as links to the full-sized image file.
    for work, info in data.items():
        artist, culture, medium = (
            info.get("Artist", ""),
            info.get("Culture"),
            info.get("Medium"),
        )
        selectors[artist] = f"{artist} (Artist)"
        for c in culture.split("/"):
            c = c.strip()  # Remove leading/trailing whitespace
            selectors[c] = f"{c} (Culture)"
        for m in medium.split("/"):
            m = m.strip()  # Remove leading/trailing whitespace
            selectors[m] = f"{m} (Medium)"
        filters = f"{artist} {culture} {medium}"
        print(f"<div class='ITEM' filters='{filters}'>", file=out)
        print(f"<h2>{work}</h2><dl>", file=out)
        # Metadata first
        for key, value in info.items():
            if key != "images":
                print(f"  <dt>{key}</dt><dd>{value}</dd>", file=out)
        # Images at end
        for n, image in enumerate(info["images"]):
            print(f"  <dt>Image {n+1}</dt>", file=out)
            print(
                f"  <dd><a href='{image}'>"
                f"<a href='{image}'>"
                f"<img src='{image}' width='400em' alt='{work}'>"
                "</a></dd>",
                file=out,
            )
        print("</dl><hr/></div>", file=out)
    print("</body></html>", file=out)

    return add_selectors(selectors, out.getvalue())


def crawl_tree(start):
    data = {}
    # Populate the metadata from the info.yaml files
    for p in Path(start).rglob("*"):
        if p.name == "info.yaml":
            work = p.parent.name
            info = yaml.safe_load(p.read_text())
            data[work] = {"images": [], **info}

    # Crawl a second time to populate the images
    for p in Path(start).rglob("*"):
        work = p.parent.name
        if p.suffix in (".jpg", ".png"):
            data[work]["images"].append(f"{work}/{p.name}")

    return data


if __name__ == "__main__":
    data = crawl_tree(f"{dirname(__file__)}")
    print(htmlify(data))
