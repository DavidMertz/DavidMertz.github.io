#!/usr/bin/env -S uvx --with pandas --with pyyaml python@3.13
"""
Install `uv` with:

    curl -LsSf https://astral.sh/uv/install.sh | sh

Config file should resemble:

    csv_file: path/to/my_data.csv
    fill_empty: false
    mappers:
        MemberID: alphanum(6)
        EmployeeID: alphanum(5)
        DuesPaymentMethodCustomerId: alphanum(26)
        FirstName: random_firstname
        MiddleName: random_letter
        LastName: random_lastname
        EmailAddress: random_email
        Phone: random_phone
        Address: random_address
        ZipCode: random_zipcode
        cf_formerLocal: "lambda: 'PLACEHOLDER'"
        externalId1: random_digits(9)
        externalId2: random_month
"""

from base64 import a85decode
from bz2 import decompress
from collections import defaultdict
from os.path import basename
import random
import sys
import yaml

import pandas as pd

dtypes: dict = defaultdict(lambda: "string")

firstnames_500 = (
    decompress(
        a85decode(
            b'6<\\%_0gSqh;cs:3Mj",AX@Id@&3p3Ncp.R1n6cJ=n-c`dju]+qZ@RgRf"N\'#L]j,(NAMss4Y'
            b"n9PWTZUt4A85,WBX@.RQXGF6RJ6Y!$\\?!&Oq9N!&SET%0KOCPo2GLPQlk3RPYHR$tM+3%0hd"
            b"lBE2^ReF<f12)HZ-4Z+J583J;Z%DHW>DWOd[A0BGXM@stq+H\"mh#8X!lV1AaNOut6l'oIU^3"
            b"?XRJ<M^,n;1+d`)!Y57/cr`ik=ilCN>'V\\L#SK1k6c=C=:;\\.Gp5s]YVe'W.LcGZjk9iM<sI"
            b'e^+VIR2e?)a:Kj.)m[H3!cRQFEi_JsQN,`,X&"Ps:hg"mDF:@YJRWSXb,]:7YGj,u^J.E%F\''
            b"W??;Mdp6A@QtC:]iFLZ&7[O[YR7$p+GbKpf,%OtjBbG<KM1R[.j,LB\"<#*c4&2Z0<(S'`L2D"
            b"k'D0G6YX+Y&;C/>1S<EmgtDcn/_]LtaZ*pRUk-BUo?Baq-=/CP[f0S9TTnCKf0$,'X@/1L*W$&?6"
            b'3A[^d]cVfENJ=Uo(t9Edl+P*t-H0kbi1.2Q#U"Z)?9R3"`m_[^t"rr)WgO:,;m&FKD(gR&L<6AiH'
            b"HD]PppGi.TtinNb&.GjkV>k7`.iG8;'I)0?ioUXX_%UI]UeZfn$pM1GmaT<BKN&%0bpa/+M8RAJ9"
            b"QRd/CGk3\\ff#J4^?MC_qhOi&4iJBeXE:N-n]B@4HJ2lIYi5gWU4eaIgBjYB]Tk)lb'%K^]Ui"
            b'N$,4,]i#<"W@t[)J8<0?^`-9Qchei7)%"527pMVLh%aT_ZLtm-&gf\'i"PcJ_6"c3%ME5Z`I='
            b"Q&l7#-_6X8sKY!s:Q84bqaZfo6M?%W.\\)ggT4E<6AMjl8t-3YEL1(n9(Uu%PDA4/>O\"G'Grk"
            b"`f[']W-FRiESo&__l\"9D2.dEX2<!F6jk-/8W_,2p<^?b8kd<JJ>nVQn[HF%G:L@'<\\u7o?[<"
            b'-@V@$:_eF-s%\\:RaMQ5HtuP:hgSRiG(;*"VDIgtClL3^f6eYhM`OIIU,e/$\\n*G#K[gG#MC<'
            b'ZnmV,$usacd&?@Rl-W&GC"L)/(.P:<Ksd(q4Maru@E.<`cTTXulC(#GaQ;=A:XE[WY6C&>m4oiY4'
            b"h6WUO(&_F&jR_'j+VD#8]?ia&l\"U,A<>1H5mhmD@^Y^AcpeU5D7d7JFR;,OlHai\\3EYl7]f^"
            b"Ve!/VRX0NlIW>PG+5g\\Gpr[)*^Za0';T2XtYj4!0:A,MU5KdKH,mViB#WDA,N84;biBHjMm0"
            b'TA2HWc6C+e4;j@@Y_.Pq\\)uu>lO)>],#Jba[78j#T,p+dnIhj<F`F?Y+9n":S%-?qfNb=CBH'
            b"85ap.LWA'*r(Apih9W1Q3I]nl!)oS`KtDjk@E@Y;Ftea\"8H3P+PC@I=?<_<ZA40P_S+`f(fn"
            b"(6)A4R*o2ndWrf)hU!Emq9EVjS)DsB>HLBQ_\"&c>%1dO?Ahg/d;#(:P$>tA]AMF2I'2g=)iM"
            b's)uK5U,jI9J?fDKmAg;:hV*d8<F>mf?kf/M?KstKZ5ALo$AMsK[n3o"HYN-"<[t^!+[k6G.)3hKR'
            b"lPm<<aQi)r/6u*+3#^:nhcB;8eh>:!$*0OUfGhG,/OY]\"PtMJmlTW#m*<#eNOZ^Ne'6\\ZcR]"
            b"-?bWX=YZFfL\\j;Zi7Z3V#cX8PGBt4B_6\"WlNh5s^9%X1$,]Yd'-dtkt%_hcGI\\QM*45b4@>l"
            b'3D*;Rifcj[Lgqq29(db$Yk^QA-:Kqe?`Ttk^#Q$HhHb^hk/0*WFHBDf"j5*ml96]gYY9u-0q2<-+'
            b"LK)S2:^'\\UMH#gBX#c[\\<JLkWc5nO,,'DZjUhiEHRiaZjIJ6ZiWfAOpL\":'Vga[h(0i]"
            b'8:,`nW466.JBKd%j[:8@;,2K[0i7PZ(cA#rA0*HF,>I8dL<dfd!Xr1^"S:g`)/gqf6a3YWLa!tWh'
            b"`/g^ChQ\\&\\G6[mBUCiEW'ghT2[=3'4b^j#:O*ip.V5u:?PX9=<U[^!>hhcl3f:DK<+am]Ks9"
            b"Rd0R7u8I$*W'Y;7E!6\"&H6?W._l5V(9XR2@?4fmAs@ldV@G4#>JmbGH(<A<cPgWhMJW2a\\CE"
            b"Y;1dK'PhFka7-O,Fn18JHS8sJUVOFE=S5BI'fZq;mRX5_&cfAFEaS"
        )
    )
    .decode()
    .splitlines()
)

lastnames_500 = (
    decompress(
        a85decode(
            b"6<\\%_0gSqh;d&AF-hdTAbfBY^&3p3nYWr0fn6c4r+93N4!!iQ9!+6%Z@[Ct6CCd6WW!5TVY3"
            b"6<n_BqrE`:Ts`dWm(c@Zt=i5S6e*'-^tMBJ_OHTKOMb!Eu'aVkk;F@0V\\k@VMO\"6Qe6^A4BK"
            b'c;</r89`n+hl9.is!#TB_!!!H.!!!!F:Eg>n2M+lVC7A!rWT9YKPRRhgVo3fPr7AIU=,SDK"o+b&'
            b"T9gB+F3g#%-MOehTq*!A&i/mfZrHM0LLGA3KIZ*;$0<O.iaduQ-.>ae1S!l1F9F=E.%AaR\\j"
            b'A*iLa48")_b8)9fK"%)(a_uBcBJYWUlK\'F9*;;c1I?$J.HaL8L.4C9,<o%O%Kl&lM79hO<Bo'
            b"F(>3OqO<3cTarWj5&4;6^@KN-9ge?Cpm@;oXZ_80iX3/?>.e:EC.tZLqeNsa7WHUgCbNgqP,CqkF"
            b"6\"\\GnbS)Cd;i8OoXQYK('5[t_I2;<VT6$;L$;@X[1pO9b[M@ud/^+A3BlZ%D?:D'\"m'T#hRX"
            b"L22QKaG8hj\\Q'>kDTh!!!(>]#8CQXW1b#emi]bWKAmD;,I><a[1F\";ZNbaYbg^Y0ckYKo8E."
            b'n^mhMqG_GD+"0f?jRl8`HnF+[Z2?u@/s#=OE"mA9=a$bIe<5muT"fc/`41%<Kh[+K<*?C6\\G'
            b"iRG>CVX)N)jr9;p6G>++=r!_Aa2].X377RQ/0#=];'4nr_?OC5?no'=%?R\\d_*6K>dn%1D;E"
            b">0)%'--=\"gPj%07II!lq>MOd89/f%TqVF7&[9i8S.?LS*eirB4>%![\\D2oI_BG_4RMfNL!QH"
            b"9+2eF3u&:4[W8d^a;R&qd?4,E\\Q[UBPt.j^.22fe-s9Mp3AmflLCOc0F5[0I1T:05h;10Nn'"
            b'7q);qno!7G*\\g&4HBggL"nY)p0t`m^mp#SHqBD039+aBlJ3O>*3;9"u_nK6cnqBE$@5eX&3c'
            b"63@DKj^#C\"/fl>mS9@h,@NjGnta.&Wk:-G,cObFWlg6HGi.S,8qHV1A[F6TWo'9\\h33YbisM"
            b'=k>[>V7YR2u(N8/U_8ReJ*SARN@r5Yh+Q;bgeP@\\E/%qVo<eLVKo"hFS^-+4:[#a6I!2u06u'
            b"bJkHN<l?Dspt#[1^m^M5QVPnXOZ[]2MPrRSd)]MiAI1Gft;2Ls4/+k]X=$N\\2'pujfCZ7^C/"
            b'r"G)OAQ(Z[PGN9#V1=WGI1%Uc_DBBsnt@i\\HqmX7rX1Ha?=UN%>\\cXNVPPQAori]ZO4g&Cjb'
            b'7\\`gXBLk+;o4oJKa-i"W"E^8dL,nWJ@*O:5G#$7X:BI(VOW:U+;imAt4e%d2V2-FHc)9lYX>'
            b'GV:X?n,GU-54J*[cg"RGs>D?SZc%]n&cpC]Pq+G2bIc8mnQs)%n&iJ\\5oC]jbLc=5)gicm1-'
            b"fhh6hUjQ8Isfg\\1k)]E>ZF/tL-j$C<+E,=$5bb0:.KKKG\\FR\\0k_-jE$i`\\%Mthl]_-/>6:G"
            b"67NCq+>03O@-)kl8m73.cG-8(*R0PhIR_7#hH8<jOE%7=9=M+(ObWeW-FpJc-%'k9R!)e`3PA>$k"
            b'9dZ-8"X\'mIB`e<KZ0X/m<.X"tRS%/"5j`Nu?FSdNtSbEA39@^i55jk3\\gq9X#B*_))m"Mu):'
            b';N<\\4"I1H7_<tN7!:"+\\ZV9WI&L6k>0iG?>!A/%l8ojrGog2\\b,[AhKtl*^I>W)N&<I2DRi8'
            b"$jk5Ui-+p>BaAe)fC[WpcKQYp(`k&Jne+ub\\>kmT3&dD*)oHQ#u`a-!=rQ'q&DjbABB!Q-qi"
            b"H<8Sil,r\"<;t`0jVo<.eAba]b\\PDc&1C'q&D?WBi1f=K,L\".VETS7IjWWGTUgFL0G@Gf'!nh"
            b"`h'i3A%teRA)[6:*r>>>bAtrO4ach8^OnFL3X)h2e^c%kTT64ERH6bm;^gO?$9q2Q<F`38MJBPqb"
            b"^_faq]6L*7__$8`#Z6M6WX$6hes^S;XkEXG,A=d'aoaMr+$a[Tk9F(Qktf;2I?mg,o8d?7i(PlhT"
            b'_biF_)kY0W(W0F3>)X]+cBU42?KJ.,p.r8QsL,0r(CR[nm_LTkb6D02."YHH3?\\(0p]*.Z^Z'
            b"aU0)-M^&F6>'8F(sI;L_@R*_LMkA=Kl[U@@$@.YbmCS;8;jT`+C;C`/S<DJ#U2.L6s2ESk'IN`L2"
            b">N7[''/po.BbZ[r_fMTS[,.?dX7%a7u61=l,O7a<&4HW%]'k^O9a3HO9>b[r4I>PC2!?3(_Yml85"
            b'tSF+P"j]^"r`*&U4(-7kkO@0BW];`Um.ar4$Xg@2Iln@&7#?bm<L\\pa"hDS%s(A\\u7aSW([j'
            b"](\\Ad`C&M8>iWp*`S?SN'I5_aao0!"
        )
    )
    .decode()
    .splitlines()
)

streets_100 = (
    decompress(
        a85decode(
            b"6<\\%_0gSqh;d\"1HSAbI.R,<Do&3p5Fi'5iHJ1pBKTKiP2S_@jF.VL/tNA?p-!>?WMOS!)gR1"
            b"M_PNM:))!!C_-#,g`$1&q:S1^8Ie&g^6$!!!4_!!!@>pEU)3`*i5_m#l<5bmk%>6b5jG.6sDS6o,"
            b".g+kWQ%@@/C5Eh;+Q=WEm-BW74uaNFrqdd*j7^A#Ps?BHL*(q_=rE@+GU)F_ZP'/'MP&:^MPR^IC"
            b'_aV_6<gTcKl6"1*N$kks81^T"t(]tESd"#S4*XBTnp7ng/dDKLq)GW#DgnKYL3%k.fR/&OL`A3P#'
            b",\"`jk/k<?ZXZ6pM)XW(,LE9NeQL3CbpT2H;$Wj)a;%'#@h'ECk.ql4mJQ8LEC,52aB]c_:7i"
            b'0-uW)f67`""939CFuAPk^LS@O7;=H`T_S]2k]SfjK\\QQ7GWa2/"3Q,s7\\_jUf>2L(Gc0brJ['
            b",W$*mi<&ir5mD_.TIAC@$>J@%qEP)KE&5E+GZI,]Xhk`TZ<`Hc<C-$a*i-P8S'>X#1T]DTVN#2SQ"
            b"dISpAK,DWlBf:7e5&g#S-E-l#Vt?dZWH5nn/-R=I!G(]'-?;P)Mn(%%-qHANc=2;"
        )
    )
    .decode()
    .splitlines()
)


def alphanum(N):
    "Return a function producing an alphanumeric string of length N"
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"

    def inner(chars=chars, N=N):
        return "".join(random.choices(chars, k=N))

    return inner


def random_firstname(firsts=firstnames_500):
    "Return a random firstname"
    return random.choice(firsts)


def random_lastname(lasts=lastnames_500):
    "Return a random lastname"
    return random.choice(lasts)


def random_letter():
    return random.choice("ABCDEFGHIJKLMNOPQRSTUFWXYZ")


def random_email():
    domain = random.choice(["com", "org", "edu", "gov", "mil"])
    user = f"{random_firstname()}.{random_lastname()}"
    return f"{user}@example.{domain}"


def random_phone():
    digits = "".join(random.choices("0123456789", k=10))
    return f"+1{digits}"


def random_address(streets=streets_100):
    number = "".join(random.choices("0123456789", k=3))
    name = random.choice(streets)
    return f"{number} {name}"


def random_zipcode():
    five_digit = "".join(random.choices("0123456789", k=5))
    if random.random() < 0.5:
        return five_digit
    else:
        plus_four = "".join(random.choices("0123456789", k=4))
        return f"{five_digit}-{plus_four}"


def random_digits(N):
    def inner():
        return "".join(random.choices("0123456789", k=N))

    return inner


def random_month():
    months = "Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split()
    return random.choice(months)


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print(f"USAGE: {basename(__file__)} <config.yaml>")
        sys.exit()

    config = yaml.safe_load(open(sys.argv[1]))
    df = pd.read_csv(config["csv_file"], dtype=dtypes)
    # Yes, eval() will execute arbitrary code.
    # ...but only code named in YAML file created by the user
    for col, fun in config["mappers"].items():
        if config["fill_empty"]:
            df[col] = [eval(fun)() for _ in range(len(df))]
        else:
            df.loc[df[col].notnull(), col] = [
                eval(fun)() for _ in range(sum(df[col].notnull()))
            ]

    df.to_csv(sys.stdout, index=False)
