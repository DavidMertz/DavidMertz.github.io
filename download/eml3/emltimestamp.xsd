<?xml version = "1.0" encoding = "utf-8"?>
<!--Generated by XML Authority. Conforms to w3c http://www.w3.org/2001/XMLSchema-->
<xsd:schema xmlns = "urn:oasis:names:tc:evs:schema:eml:ts"
	 targetNamespace = "urn:oasis:names:tc:evs:schema:eml:ts"
	 xmlns:xsd = "http://www.w3.org/2001/XMLSchema"
	 version = "0.0"
	 elementFormDefault = "qualified">
	<!-- edited with XML Spy v4.3 U (http://www.xmlspy.com) by John Ross (Security and Standards) -->
	
	
	<!-- Schema for XML Time-stamp
    xmltimestamp#
    $Revision: 0.0 $ on $Date: 2002/02/28 16:01:01 $ by $Author: Nick Pope $

-->
	
	
	<!-- Schema definitions copied from  http://www.w3.org/2000/09/xmldsig -->
	
	
	<!-- Basic Types Defined for Signatures -->
	
	<xsd:simpleType name = "CryptoBinary">
		<xsd:restriction base = "xsd:base64Binary"/>
	</xsd:simpleType>
	<xsd:simpleType name = "DigestValueType">
		<xsd:restriction base = "xsd:base64Binary"/>
	</xsd:simpleType>
	<xsd:simpleType name = "QualifierType">
		<xsd:restriction base = "xsd:string">
			<xsd:enumeration value = "OIDAsURI"/>
			<xsd:enumeration value = "OIDAsURN"/>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name = "HMACOutputLengthType">
		<xsd:restriction base = "xsd:integer"/>
	</xsd:simpleType>
	
	<!-- Start Signature -->
	
	<xsd:element name = "Timestamp" type = "TimestampType"/>
	<xsd:complexType name = "TimestampType">
		<xsd:sequence>
			<xsd:element ref = "TimestampedInfo"/>
			<xsd:element ref = "SignatureOrTSTValue"/>
			<xsd:element ref = "KeyInfo" minOccurs = "0"/>
			<xsd:element ref = "Object"/>
		</xsd:sequence>
		<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
	</xsd:complexType>
	<xsd:element name = "SignatureOrTSTValue" type = "SignatureOrTSTValueType"/>
	<xsd:complexType name = "SignatureOrTSTValueType">
		<xsd:simpleContent>
			<xsd:extension base = "xsd:base64Binary">
				<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	
	<!-- Start TimestampedInfo-->
	
	<xsd:element name = "TimestampedInfo" type = "TimestampedInfoType"/>
	<xsd:complexType name = "TimestampedInfoType">
		<xsd:sequence>
			<xsd:element ref = "CanonicalizationMethod"/>
			<xsd:element ref = "SignatureOrTSTMethod"/>
			<xsd:element ref = "Reference"/>
			<xsd:element ref = "TSTXMLInfoReference" minOccurs = "0"/>
		</xsd:sequence>
		<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
	</xsd:complexType>
	<xsd:element name = "CanonicalizationMethod" type = "CanonicalizationMethodType"/>
	<xsd:complexType name = "CanonicalizationMethodType" mixed = "true">
		<!-- (0,unbounded) elements from (1,1) namespace -->
		<xsd:sequence>
			<xsd:any namespace = "##any" processContents = "strict" minOccurs = "0" maxOccurs = "unbounded"/>
		</xsd:sequence>
		<xsd:attribute name = "Algorithm" use = "required" type = "xsd:anyURI"/>
	</xsd:complexType>
	<xsd:element name = "SignatureOrTSTMethod" type = "SignatureMethodType"/>
	<xsd:complexType name = "SignatureMethodType" mixed = "true">
		<!-- (0,unbounded) elements from (1,1) external namespace -->
		<xsd:sequence>
			<xsd:element name = "HMACOutputLength" type = "HMACOutputLengthType" minOccurs = "0"/>
			<xsd:any namespace = "##other" processContents = "strict" minOccurs = "0" maxOccurs = "unbounded"/>
		</xsd:sequence>
		<xsd:attribute name = "Algorithm" use = "required" type = "xsd:anyURI"/>
	</xsd:complexType>
	
	<!-- Start Reference -->
	
	<xsd:element name = "TSTXMLInfoReference" type = "ReferenceType"/>
	<xsd:element name = "Reference" type = "ReferenceType"/>
	<xsd:complexType name = "ReferenceType">
		<xsd:sequence>
			<xsd:element ref = "Transforms" minOccurs = "0"/>
			<xsd:element ref = "DigestMethod"/>
			<xsd:element ref = "DigestValue"/>
		</xsd:sequence>
		<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
		<xsd:attribute name = "URI" use = "optional" type = "xsd:anyURI"/>
		<xsd:attribute name = "Type" use = "optional" type = "xsd:anyURI"/>
	</xsd:complexType>
	<xsd:element name = "Transforms" type = "TransformsType"/>
	<xsd:complexType name = "TransformsType">
		<xsd:sequence>
			<xsd:element ref = "Transform" maxOccurs = "unbounded"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name = "Transform" type = "TransformType"/>
	<xsd:complexType name = "TransformType" mixed = "true">
		<!-- (1,1) elements from (0,unbounded) namespaces -->
		<xsd:choice minOccurs = "0" maxOccurs = "unbounded">
			<xsd:any namespace = "##other" processContents = "lax"/>
			<xsd:element name = "XPath" type = "xsd:string"/>
		</xsd:choice>
		<xsd:attribute name = "Algorithm" use = "required" type = "xsd:anyURI"/>
	</xsd:complexType>
	
	<!-- End Reference -->
	
	<xsd:element name = "DigestMethod" type = "DigestMethodType"/>
	<xsd:complexType name = "DigestMethodType" mixed = "true">
		<xsd:sequence>
			<xsd:any namespace = "##other" processContents = "lax" minOccurs = "0" maxOccurs = "unbounded"/>
		</xsd:sequence>
		<xsd:attribute name = "Algorithm" use = "required" type = "xsd:anyURI"/>
	</xsd:complexType>
	<xsd:element name = "DigestValue" type = "DigestValueType"/>
	
	<!-- End SignedInfo -->
	
	
	<!-- Start KeyInfo -->
	
	<xsd:element name = "KeyInfo" type = "KeyInfoType"/>
	<xsd:complexType name = "KeyInfoType" mixed = "true">
		<!-- (1,1) elements from (0,unbounded) namespaces -->
		<xsd:choice maxOccurs = "unbounded">
			<xsd:element ref = "KeyName"/>
			<xsd:element ref = "KeyValue"/>
			<xsd:element ref = "RetrievalMethod"/>
			<xsd:element ref = "X509Data"/>
			<xsd:element ref = "PGPData"/>
			<xsd:element ref = "SPKIData"/>
			<xsd:element ref = "MgmtData"/>
			<xsd:any namespace = "##other" processContents = "lax"/>
		</xsd:choice>
		<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
	</xsd:complexType>
	<xsd:element name = "KeyName" type = "xsd:string"/>
	<xsd:element name = "MgmtData" type = "xsd:string"/>
	<xsd:element name = "KeyValue" type = "KeyValueType"/>
	<xsd:complexType name = "KeyValueType" mixed = "true">
		<xsd:choice>
			<xsd:element ref = "DSAKeyValue"/>
			<xsd:element ref = "RSAKeyValue"/>
			<xsd:any namespace = "##other" processContents = "lax"/>
		</xsd:choice>
	</xsd:complexType>
	<xsd:element name = "RetrievalMethod" type = "RetrievalMethodType"/>
	<xsd:complexType name = "RetrievalMethodType">
		<xsd:sequence>
			<xsd:element name = "Transforms" type = "TransformsType" minOccurs = "0"/>
		</xsd:sequence>
		<xsd:attribute name = "URI" type = "xsd:anyURI"/>
		<xsd:attribute name = "Type" use = "optional" type = "xsd:anyURI"/>
	</xsd:complexType>
	
	<!-- Start X509Data -->
	
	<xsd:element name = "X509Data" type = "X509DataType"/>
	<xsd:complexType name = "X509DataType">
		<xsd:sequence maxOccurs = "unbounded">
			<xsd:choice>
				<xsd:element name = "X509IssuerSerial" type = "X509IssuerSerialType"/>
				<xsd:element name = "X509SKI" type = "xsd:base64Binary"/>
				<xsd:element name = "X509SubjectName" type = "xsd:string"/>
				<xsd:element name = "X509Certificate" type = "xsd:base64Binary"/>
				<xsd:element name = "X509CRL" type = "xsd:base64Binary"/>
				<xsd:any namespace = "##other" processContents = "lax"/>
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name = "X509IssuerSerialType">
		<xsd:sequence>
			<xsd:element name = "X509IssuerName" type = "xsd:string"/>
			<xsd:element name = "X509SerialNumber" type = "xsd:integer"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- End X509Data -->
	
	
	<!-- Begin PGPData -->
	
	<xsd:element name = "PGPData" type = "PGPDataType"/>
	<xsd:complexType name = "PGPDataType">
		<xsd:choice>
			<xsd:sequence>
				<xsd:element name = "PGPKeyID" type = "xsd:base64Binary"/>
				<xsd:element name = "PGPKeyPacket" type = "xsd:base64Binary" minOccurs = "0"/>
				<xsd:any namespace = "##other" processContents = "lax" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
			<xsd:sequence>
				<xsd:element name = "PGPKeyPacket" type = "xsd:base64Binary"/>
				<xsd:any namespace = "##other" processContents = "lax" minOccurs = "0" maxOccurs = "unbounded"/>
			</xsd:sequence>
		</xsd:choice>
	</xsd:complexType>
	
	<!-- End PGPData -->
	
	
	<!-- Begin SPKIData -->
	
	<xsd:element name = "SPKIData" type = "SPKIDataType"/>
	<xsd:complexType name = "SPKIDataType">
		<xsd:sequence maxOccurs = "unbounded">
			<xsd:element name = "SPKISexp" type = "xsd:base64Binary"/>
			<xsd:any namespace = "##other" processContents = "lax" minOccurs = "0"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- End SPKIData -->
	
	
	<!-- End KeyInfo -->
	
	
	<!-- Start Object (TSTXMLInfo) -->
	
	<xsd:element name = "Object" type = "ObjectType"/>
	<xsd:complexType name = "ObjectType" mixed = "true">
		<!-- add a grep facet -->
		<xsd:sequence>
			<xsd:element name = "TSTXMLInfo" type = "TSTXMLInfoType"/>
			<xsd:any namespace = "##any" processContents = "lax" minOccurs = "0"/>
		</xsd:sequence>
		<xsd:attribute name = "Id" use = "optional" type = "xsd:ID"/>
		<xsd:attribute name = "MimeType" use = "optional" type = "xsd:string"/>
		<xsd:attribute name = "Encoding" use = "optional" type = "xsd:anyURI"/>
	</xsd:complexType>
	<xsd:complexType name = "TSTXMLInfoType">
		<xsd:sequence>
			<xsd:element name = "version" type = "xsd:decimal"/>
			<xsd:element name = "policy" type = "ObjectIdentifierType"/>
			<xsd:element name = "serialNumber" type = "xsd:decimal"/>
			<xsd:element name = "genTime" type = "xsd:dateTime"/>
			<xsd:element name = "accuracy" type = "AccuracyType" minOccurs = "0"/>
			<xsd:element name = "ordering" type = "xsd:boolean" default = "false" minOccurs = "0"/>
			<xsd:element name = "nonce" type = "xsd:decimal" minOccurs = "0"/>
			<xsd:element name = "tsa" type = "EntityNameType" minOccurs = "0"/>
		</xsd:sequence>
		<xsd:attribute name = "Id" use = "required" type = "xsd:ID"/>
	</xsd:complexType>
	<xsd:complexType name = "EntityNameType">
		<xsd:sequence>
			<xsd:element name = "FriendlyName" type = "xsd:string" minOccurs = "0"/>
			<xsd:element name = "URI" type = "xsd:anyURI" minOccurs = "0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name = "AccuracyType">
		<xsd:sequence>
			<xsd:element name = "seconds" type = "xsd:decimal" minOccurs = "0"/>
			<xsd:element name = "millis" type = "xsd:decimal" minOccurs = "0"/>
			<xsd:element name = "micros" type = "xsd:decimal" minOccurs = "0"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- End Object (TSTXMLInfo) -->
	
	<xsd:complexType name = "ObjectIdentifierType">
		<xsd:sequence>
			<xsd:element name = "Identifier" type = "IdentifierType"/>
			<xsd:element name = "Description" type = "xsd:string" minOccurs = "0"/>
			<xsd:element name = "DocumentationReferences" type = "DocumentationReferencesType" minOccurs = "0"/>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:complexType name = "IdentifierType">
		<xsd:simpleContent>
			<xsd:extension base = "xsd:anyURI">
				<xsd:attribute name = "Qualifier" use = "optional" type = "QualifierType"/>
			</xsd:extension>
		</xsd:simpleContent>
	</xsd:complexType>
	<xsd:complexType name = "DocumentationReferencesType">
		<xsd:sequence maxOccurs = "unbounded">
			<xsd:element name = "DocumentationReference" type = "xsd:anyURI"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- End ObjectIdentifierType-->
	
	
	<!-- Start Algorithm Parameters -->
	
	
	<!-- Start KeyValue Element-types -->
	
	<xsd:element name = "DSAKeyValue" type = "DSAKeyValueType"/>
	<xsd:complexType name = "DSAKeyValueType">
		<xsd:sequence>
			<xsd:sequence minOccurs = "0">
				<xsd:element name = "P" type = "CryptoBinary"/>
				<xsd:element name = "Q" type = "CryptoBinary"/>
			</xsd:sequence>
			<xsd:element name = "J" type = "CryptoBinary" minOccurs = "0"/>
			<xsd:element name = "G" type = "CryptoBinary" minOccurs = "0"/>
			<xsd:element name = "Y" type = "CryptoBinary"/>
			<xsd:sequence minOccurs = "0">
				<xsd:element name = "Seed" type = "CryptoBinary"/>
				<xsd:element name = "PgenCounter" type = "CryptoBinary"/>
			</xsd:sequence>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name = "RSAKeyValue" type = "RSAKeyValueType"/>
	<xsd:complexType name = "RSAKeyValueType">
		<xsd:sequence>
			<xsd:element name = "Modulus" type = "CryptoBinary"/>
			<xsd:element name = "Exponent" type = "CryptoBinary"/>
		</xsd:sequence>
	</xsd:complexType>
	
	<!-- End KeyValue Element-types -->
	
	
	<!-- End Signature -->
	
</xsd:schema>