<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch030.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file22.png" alt="" /><figcaption>Naive_Scribble_Recto</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="matching-the-fibonacci-sequence" class="level2" data-number="8.5">
<h2 data-number="8.5">Matching the Fibonacci Sequence</h2>
<p>Here we get to something harder than the last puzzle. It is not obvious whether regular expressions are powerful enough to express this sequence. Think about your solution, or the reasons it is impossible, before you turn the page.</p>
<p>The Fibonacci sequence is a famous recursive relationship, in which each number in the sequence is the sum of the prior two numbers. Hence, the first few Fibonacci numbers are:</p>
<pre><code>1 1 2 3 5 8 13 21 34 55 89 144</code></pre>
<p>In fact, the Fibonacci sequence is only one of an infinite number of similar recursive sequences, known generally as Lucas sequences. The Lucas numbers are one such sequence in which the initial elements are 2 and 1 (rather than 1 and 1). We are actually interested here in matching “Fibonacci-like” sequences, where given two elements, the next one is the sum of those prior two.</p>
<p>As in the last puzzle, we represent numeric sequences by a number of repetitions of the <code>@</code> symbol followed by spaces. For example:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="co"># Match: 1 1 2 3 5 8</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>fibs <span class="op">=</span> <span class="st">&quot;@ @ @@ @@@ @@@@@ @@@@@@@@ &quot;</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="co"># Match: 2 1 3 4 7 11</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>lucas <span class="op">=</span> <span class="st">&quot;@@ @ @@@ @@@@ @@@@@@@ @@@@@@@@@@@ &quot;</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="co"># Match: 3 1 4 5 9 14</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>fib2 <span class="op">=</span> <span class="st">&quot;@@@ @ @@@@ @@@@@ @@@@@@@@@ @@@@@@@@@@@@@@ &quot;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="co"># Fail: 1 1 3 4 7 11</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>wrong1 <span class="op">=</span> <span class="st">&quot;@ @ @@@ @@@@ @@@@@@@ @@@@@@@@@@@ &quot;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="co"># Fail: 1 1 2 3 4 7</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>wrong2 <span class="op">=</span> <span class="st">&quot;@ @ @@ @@@ @@@@ @@@@@@@ &quot;</span></span></code></pre></div>
<p>Can you create a regular expression that matches only Fibonacci-like sequences within encoded strings?</p>
<p>Before you turn the page…</p>
<p><strong>The Golden Spiral beautifully generalizes Fibonacci Numbers.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>It turns out that matching properly encoded Fibonacci-like sequences is within the power of regular expressions. Adding together two prior elements is actually a lot like simply doubling the one prior element as we did in the last puzzle.</p>
<p>The main difference in the solution to this puzzle versus the last one is that we need to backreference two groups in the lookahead pattern rather than just one. Study the explanation of the last puzzle before looking at the solution to this one.</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat1 <span class="op">=</span> <span class="vs">r&quot;^(((@+) (@+) )(?=$|\3\4 ))+(\3\4)?$&quot;</span></span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat2 <span class="op">=</span> <span class="vs">r&quot;^@+ (((@+) (@+) )(?=\3\4 ))+&quot;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> s <span class="kw">in</span> (fibs, lucas, fib2, wrong1, wrong2):</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(pat1, s)</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>...     <span class="cf">if</span> match <span class="kw">and</span> re.search(pat2, s):</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>...         <span class="bu">print</span>(<span class="st">&quot;VALID&quot;</span>, match.group())</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>...     <span class="cf">else</span>:</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>...         <span class="bu">print</span>(<span class="st">&quot;INVALID&quot;</span>, s)</span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>...</span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>VALID <span class="op">@</span> <span class="op">@</span> <span class="op">@@</span> <span class="op">@@@</span> <span class="op">@@@@@</span> <span class="op">@@@@@@@@</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>VALID <span class="op">@@</span> <span class="op">@</span> <span class="op">@@@</span> <span class="op">@@@@</span> <span class="op">@@@@@@@</span> <span class="op">@@@@@@@@@@@</span></span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>VALID <span class="op">@@@</span> <span class="op">@</span> <span class="op">@@@@</span> <span class="op">@@@@@</span> <span class="op">@@@@@@@@@</span> <span class="op">@@@@@@@@@@@@@@</span></span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>INVALID <span class="op">@</span> <span class="op">@</span> <span class="op">@@@</span> <span class="op">@@@@</span> <span class="op">@@@@@@@</span> <span class="op">@@@@@@@@@@@</span></span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>INVALID <span class="op">@</span> <span class="op">@</span> <span class="op">@@</span> <span class="op">@@@</span> <span class="op">@@@@</span> <span class="op">@@@@@@@</span></span></code></pre></div>
<p>Actually, there are two extra caveats here. We assume in this solution that an even number of numbers are represented in the string. The lookahead only evaluates the one next number (that must be the sum of the current two numbers). However, this means that we match two different ‘@’ sequences at a time; and hence that there must be an even number if we match to the end.</p>
<p>The second issue is that since we stride two-by-two through the “numbers,” we need to use a second regular expression to make sure the sequence <em>predicts</em> the next element when offset by one element as well. We see that problem in <code>wrong1</code>. If we only utilized <code>pat1</code> it would incorrectly match as Fibonacci-like. Since <code>pat1</code> already collects the final “number,” there is no need for <code>pat2</code> to do so as well; the lookahead suffices.</p>
<!-- blank recto page -->

</div>
</section>
</body>
</html>
