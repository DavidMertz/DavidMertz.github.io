<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch026.xhtml</title>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="identifying-equal-counts" class="level2" data-number="8.1">
<h2 data-number="8.1">Identifying Equal Counts</h2>
<p>At times we encounter a message or a stream that uses balanced “increment” and “decrement” symbols. For example, one way to check that a message has terminated might be to match up the increments and decrements. The same concept would apply to many kinds of messages and symbols—perhaps you’d like to set the table with the same number of forks and knives, for example.</p>
<p>As a simplification of the general problem, write a regular expression that matches strings that consist of any number of ‘A’ characters, followed by the same number of ‘B’ characters.</p>
<p>For example <code>AAABBB</code> and <code>AAAAAAABBBBBBB</code> should match, while <code>AAAABBBBBB</code> should fail to match.</p>
<p>Before you turn the page…</p>
<p><strong>Lateral thinking might help you find the answer.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>You cannot match patterns based on having an equal number of different symbols using regular expressions. Or at least you cannot do so in the general case. It is, of course, perfectly possible to require exactly seven ’A’s and exactly seven ’B’s. But if the count is arbitrarily large, the kind of “machine” that can match the message requires additional power.</p>
<p>In computer science or mathematical terms, a regular expression is equivalet to a <em>nondeterministic finite automaton</em> (NFA), where a regex provides a very compact spelling of such an NFA. More powerful machines include <em>pushdown automata</em> (PDA) which have an indefinitely large “stack” of stored symbols. One most often encounters PDAs as parsers. A PDA, even the nondeterministic variety, remains formally less powerful than a Turing Machine.</p>
<p>In simple terms, if you want to count occurrences, you need to use variables that can store a number (or a data structure like a list to hold the symbols).</p>
<p>Many new users of regexen fall into a trap of hoping this puzzle is solvable. Or more often still, something equivalent like matching up opening and closing parentheses, brackets, or XML/HTML tags. <em>Hic sunt dracones</em>! (Here be dragons)</p>
</div>
</section>
</body>
</html>
