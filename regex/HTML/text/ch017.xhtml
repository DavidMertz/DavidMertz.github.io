<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch017.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file13.png" alt="" /><figcaption>Striated_Recto</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="reimplementing-str.count" class="level2" data-number="7.1">
<h2 data-number="7.1">Reimplementing str.count()</h2>
<p>The Python method <code>str.count()</code> is widely useful to find substrings inside a larger string. For example, here is some typical code you might write:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="co"># Lyric from song &quot;Hot Knife&quot; by Fiona Apple</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s <span class="op">=</span> <span class="st">&quot;&quot;&quot;If I&#39;m butter, if I&#39;m butter</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="st">If I&#39;m butter, then he&#39;s a hot knife</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="st">He makes my heart a CinemaScope screen</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">Showing the dancing bird of paradise</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="st">&quot;&quot;&quot;</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s.count(<span class="st">&#39;e&#39;</span>)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="dv">15</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s.count(<span class="st">&#39;tt&#39;</span>)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="dv">3</span></span></code></pre></div>
<p>Imagine that Python did not have the method <code>str.count()</code> but you wished to implement a similar function by utilizing regular expressions, with the signature:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> my_count(substring: <span class="bu">str</span>, string: <span class="bu">str</span>) <span class="op">-&gt;</span> <span class="bu">int</span>:</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="co"># re.sub(..., ...)  # maybe something like this?</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>    ...</span></code></pre></div>
<p>Before you turn the page…</p>
<p><strong>How can a regex count the substring occurrences?</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>Two functions in the Python <code>re</code> module seem especially likely to be useful. The <code>re.sub()</code> function will replace a pattern with something else. We might try a solution using that, for example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> my_count(substring, string):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>...     <span class="cf">return</span> <span class="bu">len</span>(re.sub(<span class="vs">fr&quot;[^</span><span class="sc">{</span>substring<span class="sc">}</span><span class="vs">]&quot;</span>, <span class="st">&quot;&quot;</span>, string))</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> my_count(<span class="st">&#39;e&#39;</span>, s)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="dv">15</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> my_count(<span class="st">&#39;tt&#39;</span>, s)   <span class="co"># Oops, this goes wrong</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="dv">10</span></span></code></pre></div>
<p>So that try is not quite correct. It will count single characters fine, but for larger substrings it gets confused. In the example, the inversion of the character class is <code>[^tt]</code> which is the same as simply being <em>not a “t”</em>. In other words, we counted the “t”’s not the “tt”’s. Even if the substring hadn’t been the same letter twice, we would count the individual letters in the pattern.</p>
<p>We can fix this with a more complex regular expression (think about how as a bonus puzzle), but even easier is using <code>re.findall()</code>:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> my_count(substring, string):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>...     <span class="cf">return</span> <span class="bu">len</span>(re.findall(<span class="vs">fr&quot;</span><span class="sc">{</span>substring<span class="sc">}</span><span class="vs">&quot;</span>, string))</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> my_count(<span class="st">&#39;e&#39;</span>, s)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a><span class="dv">15</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> my_count(<span class="st">&#39;tt&#39;</span>, s)</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="dv">3</span></span></code></pre></div>
<!-- blank recto page -->

</div>
</section>
</body>
</html>
