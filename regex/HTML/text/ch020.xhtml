<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch020.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file16.svg" alt="" /><figcaption>johnny-automatic-left-hand-spread</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    </p>
</div>


<section id="playing-poker-part-1" class="level2" data-number="7.4">
<h2 data-number="7.4">Playing Poker (Part 1)</h2>
<p>In earlier puzzles, we had fun playing dominoes. For the next few puzzles, let’s play poker. In particular, let’s say that a player has five cards, and we wish to compare two hands to each other. We will do this, over several puzzles, by building up small functions to answer various questions.</p>
<p>As much as possible, you should use regular expressions to express the logic; however, a few of the questions will require a little bit of non-regex code as well. First, let’s remind ourselves of the ranking of different hands of 5 cards. Our encoding will simplify card representations a little bit. Specifically, the card that might be called, e.g., <code>10♥</code> will be called <code>T♥</code> so that every card is a two symbol combination.</p>
<ul>
<li>Straight flush, e.g. <code>J♣ T♣ 9♣ 8♣ 7♣</code></li>
<li>Four of a kind, e.g. <code>A♥ 3♠ 3♥ 3♦ 3♣</code></li>
<li>Full house, e.g. <code>K♠ K♣ 6♥ 6♦ 6♣</code></li>
<li>Flush, e.g. <code>J♦ 9♦ 6♦ 5♦ 2♦</code></li>
<li>Straight, e.g. <code>9♦ 8♣ 7♣ 6♥ 5♣</code></li>
<li>Three of a kind, e.g. <code>Q♣ 8♠ 8♦ 8♣ 3♥</code></li>
<li>Two pairs, e.g. <code>J♠ J♣ 9♥ 8♥ 8♦</code></li>
<li>One pair, e.g. <code>A♥ K♦ 4♠ 4♥ 3♠</code></li>
<li>High card, e.g. <code>K♠ 9♥ 8♠ 4♥ 2♣</code></li>
</ul>
<p>Within the same kind of hand, other rules come into play. Let’s ignore those for now. We’d like two support functions to start. First, you should write a function <code>prettify(hand)</code> that takes an easier-to-type representation of suits as ‘S’, ‘H’, ‘D’, ‘C’, and turns the hands into their Unicode symbols.</p>
<p>The second and more difficult function for this puzzle asks you to make sure all the cards are sorted in descending order (as in the examples), where aces are always considered high, and the suits are ordered spades, hearts, diamonds, clubs.</p>
<p>This second function, <code>cardsort(hand)</code>, uses more Python than regular expressions per se, so just read the solution if you are less comfortable with Python itself.</p>
<p>Before you turn the page…</p>
<p><strong>Functions are a big help in larger programs.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>The truth is, we do not genuinely <em>need</em> regular expressions for either of these support functions. But we do have the opportunity to use them. First let’s transform any ASCII version of a hand into the Unicode version. Along the way, we make sure the hand consists of five valid ASCII cards.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> prettify(hand):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="cf">assert</span> re.search(<span class="vs">r&#39;^([2-9TJQKA][SHDC] ?)</span><span class="sc">{5}</span><span class="vs">$&#39;</span>, hand)</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>    symbols <span class="op">=</span> {<span class="st">&#39;S&#39;</span>: <span class="st">&#39;</span><span class="ch">\u2660</span><span class="st">&#39;</span>, <span class="st">&#39;H&#39;</span>: <span class="st">&#39;</span><span class="ch">\u2665</span><span class="st">&#39;</span>,</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>               <span class="st">&#39;D&#39;</span>: <span class="st">&#39;</span><span class="ch">\u2666</span><span class="st">&#39;</span>, <span class="st">&#39;C&#39;</span>: <span class="st">&#39;</span><span class="ch">\u2663</span><span class="st">&#39;</span>}</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>    <span class="cf">for</span> let, suit <span class="kw">in</span> symbols.items():</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>        hand <span class="op">=</span> re.sub(let, suit, hand)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>    <span class="cf">return</span> hand</span></code></pre></div>
<p>Sorting uses mostly plain Python techniques. In particular, we can rely on the fact that Python’s sort is <em>stable</em>. This means the order will not change between equivalent elements. Therefore, sorting first by suit, then by number will be guaranteed to have the right overall effect.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> cardsort(hand):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="kw">def</span> by_num(card):</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        <span class="bu">map</span> <span class="op">=</span> {<span class="st">&#39;T&#39;</span>:<span class="st">&#39;A&#39;</span>, <span class="st">&#39;J&#39;</span>:<span class="st">&#39;B&#39;</span>, <span class="st">&#39;Q&#39;</span>:<span class="st">&#39;C&#39;</span>,</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>               <span class="st">&#39;K&#39;</span>:<span class="st">&#39;D&#39;</span>, <span class="st">&#39;A&#39;</span>:<span class="st">&#39;E&#39;</span>}</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>        num <span class="op">=</span> card[<span class="dv">0</span>]</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>        <span class="cf">return</span> num <span class="cf">if</span> num <span class="kw">not</span> <span class="kw">in</span> <span class="st">&#39;AKQJT&#39;</span> <span class="cf">else</span> <span class="bu">map</span>[num]</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    <span class="kw">def</span> by_suit(card):</span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>        <span class="bu">map</span> <span class="op">=</span> {<span class="st">&#39;</span><span class="ch">\u2663</span><span class="st">&#39;</span>: <span class="dv">1</span>, <span class="st">&#39;</span><span class="ch">\u2666</span><span class="st">&#39;</span>: <span class="dv">2</span>,</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>               <span class="st">&#39;</span><span class="ch">\u2665</span><span class="st">&#39;</span>: <span class="dv">3</span>, <span class="st">&#39;</span><span class="ch">\u2660</span><span class="st">&#39;</span>: <span class="dv">4</span>}</span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a>        <span class="cf">return</span> <span class="bu">map</span>[card[<span class="dv">1</span>]]</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a>    hand <span class="op">=</span> re.split(<span class="st">&#39; &#39;</span>, hand)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a>    hand.sort(key<span class="op">=</span>by_suit, reverse<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb2-15"><a href="#cb2-15" aria-hidden="true"></a>    hand.sort(key<span class="op">=</span>by_num, reverse<span class="op">=</span><span class="va">True</span>)</span>
<span id="cb2-16"><a href="#cb2-16" aria-hidden="true"></a>    <span class="cf">return</span> <span class="st">&#39; &#39;</span>.join(hand)</span></code></pre></div>
<p>Combining these:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> cardsort(prettify(<span class="st">&#39;8C AS 4H KS 2C&#39;</span>))</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&#39;A♠ K♠ 8♣ 4♥ 2♣&#39;</span></span></code></pre></div>
<p>We will need more regular expressions in the next few puzzles which continue this poker theme.</p>
<!-- blank verso page -->

</div>
</section>
</body>
</html>
