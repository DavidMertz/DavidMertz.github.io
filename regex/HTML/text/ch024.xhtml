<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch024.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file19.png" alt="" /><figcaption>Naive_Scribble_Verso</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="playing-poker-part-5" class="level2" data-number="7.8">
<h2 data-number="7.8">Playing Poker (Part 5)</h2>
<p>In the last few puzzles we identified four-of-a-kind and full house. Much of the logic for this puzzle will be similar to those, but obviously tweaked somewhat for the next cases.</p>
<p>All you have left in our poker regex family is to identify three-of-a-kind, a pair, and two pairs. As before, you may assume that tests for various hands will run in descending order of strength. So, for example, if your test for a pair will incidentally detect a hand that has four-of-a-kind, that is not a problem since it indeed ipso facto has a pair.</p>
<p>Create these three functions in this puzzle:</p>
<ul>
<li><code>is_three_of_kind(hand)</code></li>
<li><code>is_two_pairs(hand)</code></li>
<li><code>is_pair()</code></li>
</ul>
<p>Before you turn the page…</p>
<p><strong>Remember that three is more than two, but less than four.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>Identifying two- or three-of-a-kind is a lot like identifying four-of-a-kind, just with fewer repetitions. We could do it without sorting the hand, but doing so, as with our full house solution, is a bit easier.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> is_three_of_kind(hand):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>...     <span class="cf">try</span>:</span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>...         hand <span class="op">=</span> prettify(hand)</span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a>...     <span class="cf">except</span>:</span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a>...         <span class="cf">pass</span>  <span class="co"># Already pretty</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>...     hand <span class="op">=</span> cardsort(hand)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>...     hand <span class="op">=</span> re.sub(<span class="vs">r&#39;[^AKQJT98765432]&#39;</span>, <span class="st">&#39;&#39;</span>, hand)</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>...     pat <span class="op">=</span> <span class="vs">r&#39;(.)\1</span><span class="sc">{2}</span><span class="vs">&#39;</span>  <span class="co"># No begin/end markers</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(pat, hand)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>...     <span class="cf">return</span> match.group(<span class="dv">1</span>) <span class="cf">if</span> match <span class="cf">else</span> <span class="va">False</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>...</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>...</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_three_of_kind(<span class="st">&#39;AS 6H QH 6S 2D&#39;</span>)</span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a><span class="va">False</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_three_of_kind(<span class="st">&#39;AS 6H QH 6S 6D&#39;</span>)</span>
<span id="cb1-16"><a href="#cb1-16" aria-hidden="true"></a><span class="co">&#39;6&#39;</span></span></code></pre></div>
<p>Identifying a pair is basically identical. We simply need to settle for one copy of a card number rather than two copies.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="kw">def</span> is_pair(hand):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>    <span class="cf">try</span>:</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>        hand <span class="op">=</span> prettify(hand)</span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a>    <span class="cf">except</span>:</span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a>        <span class="cf">pass</span>  <span class="co"># Already pretty</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a>    hand <span class="op">=</span> cardsort(hand)</span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a>    hand <span class="op">=</span> re.sub(<span class="vs">r&#39;[^AKQJT98765432]&#39;</span>, <span class="st">&#39;&#39;</span>, hand)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a>    pat <span class="op">=</span> <span class="vs">r&#39;(.)\1&#39;</span>  <span class="co"># No begin/end markers</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a>    match <span class="op">=</span> re.search(pat, hand)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a>    <span class="cf">return</span> match.group(<span class="dv">1</span>) <span class="cf">if</span> match <span class="cf">else</span> <span class="va">False</span></span></code></pre></div>
<p>Matching two pairs is actually a little trickier. Remember that for a full house we matched either two of one number followed by three of the other, or matched the reverse, three then two. However, the “gap” of an unmatched number can occur in more different ways in this case. Thinking about it, two pairs might look like any of the following (even assuming sorting):</p>
<ul>
<li><code>X X _ Y Y</code></li>
<li><code>_ X X Y Y</code></li>
<li><code>X X Y Y _</code></li>
</ul>
<p>The unmatched number cannot occur in sorted positions 2 or 4 since that leaves only three cards to the other side of the unmatched number (and we have stipulated sorted order of the hand).</p>
<p>As elsewhere, we return the helpful “truthy” value that might be used later in comparing hands of the same type (namely, the two numbers of the pairs, in sorted order).</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> is_two_pairs(hand):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>...     <span class="cf">try</span>:</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>...         hand <span class="op">=</span> prettify(hand)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>...     <span class="cf">except</span>:</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>...         <span class="cf">pass</span>  <span class="co"># Already pretty</span></span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>...     hand <span class="op">=</span> cardsort(hand)</span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a>...     hand <span class="op">=</span> re.sub(<span class="vs">r&#39;[^[AKQJT98765432]&#39;</span>, <span class="st">&#39;&#39;</span>, hand)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a>...     <span class="co"># Three ways to match with unmatched number</span></span>
<span id="cb3-9"><a href="#cb3-9" aria-hidden="true"></a>...     pat <span class="op">=</span> (<span class="vs">r&quot;(.)\1.(.)\2|&quot;</span></span>
<span id="cb3-10"><a href="#cb3-10" aria-hidden="true"></a>...            <span class="vs">r&quot;.(.)\3(.)\4|&quot;</span></span>
<span id="cb3-11"><a href="#cb3-11" aria-hidden="true"></a>...            <span class="vs">r&quot;(.)\5(.)\6.&quot;</span>)</span>
<span id="cb3-12"><a href="#cb3-12" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(pat, hand)</span>
<span id="cb3-13"><a href="#cb3-13" aria-hidden="true"></a>...     <span class="cf">if</span> <span class="kw">not</span> match:</span>
<span id="cb3-14"><a href="#cb3-14" aria-hidden="true"></a>...         <span class="cf">return</span> <span class="va">False</span></span>
<span id="cb3-15"><a href="#cb3-15" aria-hidden="true"></a>...     <span class="cf">else</span>:</span>
<span id="cb3-16"><a href="#cb3-16" aria-hidden="true"></a>...         <span class="cf">return</span> <span class="st">&#39;&#39;</span>.join(n <span class="cf">for</span> n <span class="kw">in</span> match.groups() <span class="cf">if</span> n)</span>
<span id="cb3-17"><a href="#cb3-17" aria-hidden="true"></a>...</span>
<span id="cb3-18"><a href="#cb3-18" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_two_pairs(<span class="st">&#39;AH 6S 3H AD 6C&#39;</span>)</span>
<span id="cb3-19"><a href="#cb3-19" aria-hidden="true"></a><span class="co">&#39;A6&#39;</span></span>
<span id="cb3-20"><a href="#cb3-20" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_two_pairs(<span class="st">&#39;AH 6S 3H AD 3C&#39;</span>)</span>
<span id="cb3-21"><a href="#cb3-21" aria-hidden="true"></a><span class="co">&#39;A3&#39;</span></span>
<span id="cb3-22"><a href="#cb3-22" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_two_pairs(<span class="st">&#39;AH 6S 3H KD 3C&#39;</span>)</span>
<span id="cb3-23"><a href="#cb3-23" aria-hidden="true"></a><span class="va">False</span></span></code></pre></div>
<p>The remainder of your poker game program is left for a further exercise. The rest of what you’d need to do won’t have much to do with regular expressions, simply usual program flow and data structures.</p>
<!-- blank verso page -->

</div>
</section>
</body>
</html>
