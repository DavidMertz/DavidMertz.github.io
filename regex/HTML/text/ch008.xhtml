<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch008.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="endpoint-classes" class="level2" data-number="5.3">
<h2 data-number="5.3">Endpoint Classes</h2>
<p>This puzzle continues the word matching theme of the last two puzzles. However, here we have a new wrinkle. We would like to identify <em>both</em> words that start with ‘x’ and end with ‘y’, but <em>also</em> words that start with ‘y’ and end with ‘x’.</p>
<p>Remembering the word boundary special zero-width pattern we already saw, a first try at this task might be:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> txt <span class="op">=</span> <span class="st">&quot;&quot;&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="st">expurgatory xylometer yex xenomorphically exquisitely</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="st">xylology xiphosurans xenophile yunx oxytocin xylogen</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="st">xeriscapes xerochasy inexplicably yonderly inexpressibly</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">extremity xerox xylographic complexly vexillology</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="st">xanthenes xylenol xylol yexing xylenes coextensively</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="st">&gt;&gt;&gt; pat6 = re.compile(r&#39;</span><span class="ch">\b</span><span class="st">[xy][a-z]*[xy]</span><span class="ch">\b</span><span class="st">&#39;)</span></span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a></span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a><span class="st">&gt;&gt;&gt; re.findall(pat6, txt)</span></span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="st">[&#39;yex&#39;, &#39;xenomorphically&#39;, &#39;xylology&#39;, &#39;yunx&#39;, &#39;xerochasy&#39;,</span></span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="st">&#39;yonderly&#39;, &#39;xerox&#39;]</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="st">&quot;&quot;&quot;</span></span></code></pre></div>
<p>What went wrong there? Clearly we matched some words we do not want, even though all of them began with ‘x’ or ‘y’ and ended with ‘x’ or ‘y’.</p>
<p>Before you turn the page…</p>
<p><strong>Try to refine the regular expression to match what we want.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>The first pattern shown allows for either ‘x’ or ‘y’ to occur at either the beginning or the end of a word. The word boundaries are handled fine, but this allows words both beginning and ending with ‘x’, and likewise beginning and ending with ‘y’. The character classes at each end of the overall pattern are independent.</p>
<p>This may seem obvious on reflection, but it is very much like errors I myself have made embarrassingly many times in real code. A robust approach is simply to list everything you want as alternatives in a pattern.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat7 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;\b((x[a-z]*y)|(y[a-z]*x))\b&#39;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> [m[<span class="dv">0</span>] <span class="cf">for</span> m <span class="kw">in</span> re.findall(pat7, txt)]</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>[<span class="st">&#39;yex&#39;</span>, <span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;yunx&#39;</span>, <span class="st">&#39;xerochasy&#39;</span>]</span></code></pre></div>
<p>In this solution, there is a little bit of Python-specific detail in the function API. The function <code>re.findall()</code> returns tuples when a pattern contains multiple groups. Group 1 will be the whole word, but one or the other of group 2 and 3 will be blank, i.e.:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> re.findall(pat7, txt)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>[(<span class="st">&#39;yex&#39;</span>, <span class="st">&#39;&#39;</span>, <span class="st">&#39;yex&#39;</span>),</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>(<span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;&#39;</span>),</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>(<span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;&#39;</span>),</span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>(<span class="st">&#39;yunx&#39;</span>, <span class="st">&#39;&#39;</span>, <span class="st">&#39;yunx&#39;</span>),</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a>(<span class="st">&#39;xerochasy&#39;</span>, <span class="st">&#39;xerochasy&#39;</span>, <span class="st">&#39;&#39;</span>)]</span></code></pre></div>
</div>
</section>
</body>
</html>
