<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch018.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file14.png" alt="" /><figcaption>Olives_Verso</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="reimplementing-str.count-stricter" class="level2" data-number="7.2">
<h2 data-number="7.2">Reimplementing str.count() (stricter)</h2>
<p>In the last puzzle, we reimplemented <code>str.count()</code> using regular expressions. However, the solutions I presented—and most likely the solution you arrvied at on your own—ultimately came down to utilizing <code>len()</code> on something derived from the original string (to count the number of matches found).</p>
<p>For this puzzle, pretend that Python also does not have the <code>len()</code> function; and also do not implement your own equivalent by, for example, looping through an iterable and incrementing a counter when a substring is found. One way to express this is that your function should use no numeric variables or values.</p>
<p>In fact, what we want as the result is a string that represents the number of the count, not an actual number. To simplify the problem, however, we can assume that we are only counting single characters, not substrings in general. In fact, to simplify even more, let’s just assume the input strings are exclusively nucleotide symbols like in the example below (generalizing this isn’t too difficult). A solution will look something like this:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> let_count(char: <span class="bu">str</span>, string: <span class="bu">str</span>) <span class="op">-&gt;</span> <span class="bu">str</span>:</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>...     <span class="co"># maybe a while loop, some calls to re.something()</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a>        ...</span></code></pre></div>
<p>For example, using it to count nucleotides:</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> mRNA <span class="op">=</span> <span class="st">&#39;&#39;&#39;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="st">GGGAAATAAGAGAGAAAAGAAGAGTAAGAAGAAATATAAGACCCCGGCGCCGCCACCAT</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="st">GTTCGTGTTCCTGGTGCTGCTGCCCCTGGTGAGCAGCCAGTGCGTGAACCTGACCACCC</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="st">GGACCCAGCTGCCACCAGCCTACACCAACAGCTTCACCCGGGGCGTCTACTACCCCGAC</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="st">AAGGTGTTCCGGAGCAGCGTCCTGCACAGCACCCAGGACCTGTTCCTGCCCTTCTTCAG</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="st">CAACGTGACCTGGTTCCACGCCATCCACGTGAGCGGCACCAACGGCACCAAGCGGTTCG</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="st">ACAACCCCGTGCTGCCCTTCAACGACGGCGTGTACTTCGCCAGCACCGAGAAGAGCAAC</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="st">ATCATCCGGGGCTGGATCTTCGGCACCACCCTGGACAGCAAGACCCAGAGCCTGCTGAT</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="st">CGTGAATAACGCCACCAACGTGGTGATCAAGGTGTGCGAGTT</span></span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="st">&#39;&#39;&#39;</span></span></code></pre></div>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> let_count(<span class="st">&#39;G&#39;</span>, mRNA)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="co">&#39;120&#39;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> let_count(<span class="st">&#39;C&#39;</span>, mRNA)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a><span class="co">&#39;152&#39;</span></span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> let_count(<span class="st">&#39;T&#39;</span>, mRNA)</span>
<span id="cb3-6"><a href="#cb3-6" aria-hidden="true"></a><span class="co">&#39;74&#39;</span></span>
<span id="cb3-7"><a href="#cb3-7" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> let_count(<span class="st">&#39;A&#39;</span>, mRNA)</span>
<span id="cb3-8"><a href="#cb3-8" aria-hidden="true"></a><span class="co">&#39;109&#39;</span></span></code></pre></div>
<p>Before you turn the page…</p>
<p><strong>Write a Python function with the restrictions given.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>This one turns out to be somewhat difficult, but also to be <em>possible</em>, which is itself sort of amazing. No numbers whatsoever are involved in the solution shown. No counters, no integer variables, no Python functions returning numbers.</p>
<p>We also do not need to use any Python string methods, although it is fair to note that some of what is performed via regular expressions might be more simple to express as string methods. The function can perform strictly and only regular expression operations… along with a little bit of Python looping (but never over numbers).</p>
<p>We use two sentinels in alternation for the loop, indicating either the number of items at a certain power of ten, or the number at the next higher power. A dictionary can map zero to nine repetitions of a sentinel to the corresponding numeral, but leave the rest of the string unchanged.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="co"># Group 1: zero or more leading @&#39;s</span></span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a><span class="co"># Group 2: some specific number of _&#39;s</span></span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a><span class="co"># Group 3: anything until end; digits expected</span></span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>counter <span class="op">=</span> {</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(_________)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;9\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(________)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;8\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(_______)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;7\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(______)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;6\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(_____)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;5\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-10"><a href="#cb4-10" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(____)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;4\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-11"><a href="#cb4-11" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(___)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;3\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-12"><a href="#cb4-12" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(__)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;2\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-13"><a href="#cb4-13" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(_)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;1\g&lt;3&gt;&#39;</span>,</span>
<span id="cb4-14"><a href="#cb4-14" aria-hidden="true"></a>    <span class="vs">r&#39;(^@*)(_*)(.*$)&#39;</span>: <span class="vs">r&#39;\g&lt;1&gt;0\g&lt;3&gt;&#39;</span></span>
<span id="cb4-15"><a href="#cb4-15" aria-hidden="true"></a>}</span></code></pre></div>
<p>A first step is to map the target character to a sentinel. It would be easy to extend the main function to map a generic regular expression pattern to that same sentinel.</p>
<p>The two sentinels underscore and at-sign are used here, but some rare Unicode codepoint in the astral plane—or even a private-use codepoint—could just as well be used instead if collision with the initial string were a concern.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="kw">def</span> let_count(c, s):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>    <span class="co"># First lines only convert single char to sentinel,</span></span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>    <span class="co"># but could be generalized to any regex pattern</span></span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>    <span class="co"># Remove everything that isn&#39;t the target character</span></span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>    s <span class="op">=</span> re.sub(<span class="vs">fr&#39;[^</span><span class="sc">{c}</span><span class="vs">]&#39;</span>, <span class="st">&#39;&#39;</span>, s)</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>    <span class="co"># Convert the target to the underscore sentinel</span></span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>    s <span class="op">=</span> re.sub(<span class="vs">fr&#39;</span><span class="sc">{c}</span><span class="vs">&#39;</span>, <span class="st">&#39;_&#39;</span>, s)</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a></span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>    <span class="co"># Loop indefinitely: do not know number digits needed</span></span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>    <span class="cf">while</span> <span class="va">True</span>:</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>        <span class="co"># Ten underscores become an @ sign</span></span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>        s <span class="op">=</span> re.sub(<span class="vs">r&#39;__________&#39;</span>, <span class="st">&#39;@&#39;</span>, s)</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>        <span class="cf">for</span> k, v <span class="kw">in</span> counter.items():</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>            <span class="co"># Replace trailing underscores with a digit</span></span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>            new <span class="op">=</span> re.sub(k, v, s)</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>            <span class="co"># Some pattern matched, so exit the loop</span></span>
<span id="cb5-17"><a href="#cb5-17" aria-hidden="true"></a>            <span class="cf">if</span> new <span class="op">!=</span> s:</span>
<span id="cb5-18"><a href="#cb5-18" aria-hidden="true"></a>                s <span class="op">=</span> new</span>
<span id="cb5-19"><a href="#cb5-19" aria-hidden="true"></a>                <span class="cf">break</span></span>
<span id="cb5-20"><a href="#cb5-20" aria-hidden="true"></a>        <span class="co"># If we have only digits, we are done</span></span>
<span id="cb5-21"><a href="#cb5-21" aria-hidden="true"></a>        <span class="cf">if</span> re.match(<span class="vs">r&#39;^[0-9]*$&#39;</span>, s):</span>
<span id="cb5-22"><a href="#cb5-22" aria-hidden="true"></a>            <span class="cf">return</span> s</span>
<span id="cb5-23"><a href="#cb5-23" aria-hidden="true"></a>        <span class="co"># Convert from &quot;unprocessed&quot; to &quot;todo&quot; sentinels</span></span>
<span id="cb5-24"><a href="#cb5-24" aria-hidden="true"></a>        s <span class="op">=</span> re.sub(<span class="st">&#39;@&#39;</span>, <span class="st">&#39;_&#39;</span>, s)</span></code></pre></div>
<!-- blank verso page -->

</div>
</section>
</body>
</html>
