<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch007.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file5.png" alt="" /><figcaption>Basket_Recto</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="words-and-sequences" class="level2" data-number="5.2">
<h2 data-number="5.2">Words and Sequences</h2>
<p>In the previous problem, we identified words that started with ‘x’ and ended with ‘y’. You may have noticed, however, that we had already included the assumption that all the words started with ‘x’. Perhaps your solution was clever enough not to fall for the danger shown in this puzzle. Namely, perhaps not all words will actually start with ‘x’ to begin with; i.e. if we try to apply our previous regex to such text.</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> txt <span class="op">=</span> <span class="st">&quot;&quot;&quot;</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="st">expurgatory xylometer xenotime xenomorphically exquisitely</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="st">xylology xiphosurans xenophile oxytocin xylogen</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="st">xeriscapes xerochasy inexplicably exabyte inexpressibly</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="st">extremity xiphophyllous xylographic complexly vexillology</span></span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a><span class="st">xanthenes xylenol xylol xylenes coextensively</span></span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a><span class="st">&quot;&quot;&quot;</span></span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat3 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;x[a-z]*y&#39;</span>)</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> re.findall(pat3, txt)</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>[<span class="st">&#39;xpurgatory&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;xquisitely&#39;</span>,</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a><span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xerochasy&#39;</span>, <span class="st">&#39;xplicably&#39;</span>, <span class="st">&#39;xaby&#39;</span>,</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a><span class="st">&#39;xpressibly&#39;</span>, <span class="st">&#39;xtremity&#39;</span>, <span class="st">&#39;xiphophy&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xly&#39;</span>,</span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a><span class="st">&#39;xillology&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xy&#39;</span>, <span class="st">&#39;xtensively&#39;</span>]</span></code></pre></div>
<p>As you can see, we matched a number of substrings within words, not only whole words. What pattern can you use to actually match only words that start with ‘x’ and end with ‘y’?</p>
<p>Before you turn the page…</p>
<p><strong>Think about what defines word boundaries.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<!-- blank recto page -->

<p>There are a few ways you might approach this task. The easiest is to use the explicit “word boundary” special <em>zero-width match</em> pattern, spelled as <code>\b</code> in Python and many other regular expression engines.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat4 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;\bx[a-z]*y\b&#39;</span>)</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> re.findall(pat4, txt)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>[<span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;xerochasy&#39;</span>]</span></code></pre></div>
<p>Less easy ways to accomplish this include using lookahead and lookbehind to find non-matching characters that must “bracket” the actual match. For example:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat5 <span class="op">=</span> <span class="vs">r&#39;(?&lt;=^|(?&lt;=[^a-z]))x[a-z]+y(?=$|[^a-z])&#39;</span>)</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> re.findall(pat5, txt)</span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>[<span class="st">&#39;xenomorphically&#39;</span>, <span class="st">&#39;xylology&#39;</span>, <span class="st">&#39;xerochasy&#39;</span>]</span></code></pre></div>
<p>One trick here is that when we perform a lookbehind assertion, it must have a fixed width of the match. However, words in our list might either follow spaces or occur at the start of a line. So we need to create an alternation between the zero-width lookbehind and the one non-letter character lookbehind. For the lookahead element, it is enough to say it is <em>either</em> end-of-line (<code>$</code>) <em>or</em> is a non-letter (<code>[^a-z]</code>).</p>
</div>
</section>
</body>
</html>
