<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch029.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="matching-a-numeric-sequence" class="level2" data-number="8.4">
<h2 data-number="8.4">Matching a Numeric Sequence</h2>
<p>Here’s a giveaway for you. This puzzle is <em>possible</em> to solve. I won’t give you that same assurance when I describe the next two (related) puzzles.</p>
<p>Regular expressions do not really understand numbers. A ‘7’ or a ‘777’ might be sequences of digits matched in a string, but they are not fundamentally different, to regexen, than any other character patterns. Quantifiers can express numbers, either 0/1 with <code>?</code>, 0 or more with <code>*</code>, or 1 or more with <code>+</code>. In extended regexen like Python uses, we can even express specific counts like <code>{3,6}</code> for “at least three and not more than 6.” But those are specific numbers, not calculated quantities.</p>
<p>Nonetheless, we would like to recognize a distinct integer sequence, and rule out other integer sequences, using a regular expression. The trick here is that we can represent integer as repetitions of the same character, and the number of such repetitions can (to us, at least) represent numbers.</p>
<p>Specifically, for this puzzle, you would like to identify strings that represent successive doublings, and exclude all strings that do not have that pattern. We use the symbol ‘@’ for one unit simply because it is available and doesn’t have special meaning with regex patterns. Spaces can separate numbers from each other. So for example:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s1 <span class="op">=</span> <span class="st">&quot;@@@ @@@@@@ @@@@@@@@@@@@ &quot;</span> <span class="co"># 3 6 12</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s2 <span class="op">=</span> <span class="st">&quot;@ @@ @@@@ @@@@@@@@ @@@@@@@@@@@@@@@@ &quot;</span> <span class="co"># 1 2 4 8 16</span></span>
<span id="cb1-3"><a href="#cb1-3" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s3 <span class="op">=</span> <span class="st">&quot;@@ @@@@ @@@@@ @@@@@@@@@@ &quot;</span> <span class="co"># 2 4 5 10</span></span>
<span id="cb1-4"><a href="#cb1-4" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> s4 <span class="op">=</span> <span class="st">&quot;@ @ @@ @@@@ &quot;</span> <span class="co"># 1 1 2 4</span></span>
<span id="cb1-5"><a href="#cb1-5" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> s <span class="kw">in</span> (s1, s2, s3, s4):</span>
<span id="cb1-6"><a href="#cb1-6" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(pat, s)</span>
<span id="cb1-7"><a href="#cb1-7" aria-hidden="true"></a>...     <span class="cf">if</span> match:</span>
<span id="cb1-8"><a href="#cb1-8" aria-hidden="true"></a>...         <span class="bu">print</span>(<span class="st">&quot;VALID&quot;</span>, match.group())</span>
<span id="cb1-9"><a href="#cb1-9" aria-hidden="true"></a>...     <span class="cf">else</span>:</span>
<span id="cb1-10"><a href="#cb1-10" aria-hidden="true"></a>...         <span class="bu">print</span>(<span class="st">&quot;INVALID&quot;</span>, s)</span>
<span id="cb1-11"><a href="#cb1-11" aria-hidden="true"></a>...</span>
<span id="cb1-12"><a href="#cb1-12" aria-hidden="true"></a>VALID <span class="op">@@@</span> <span class="op">@@@@@@</span> <span class="op">@@@@@@@@@@@@</span></span>
<span id="cb1-13"><a href="#cb1-13" aria-hidden="true"></a>VALID <span class="op">@</span> <span class="op">@@</span> <span class="op">@@@@</span> <span class="op">@@@@@@@@</span> <span class="op">@@@@@@@@@@@@@@@@</span></span>
<span id="cb1-14"><a href="#cb1-14" aria-hidden="true"></a>INVALID <span class="op">@@</span> <span class="op">@@@@</span> <span class="op">@@@@@</span> <span class="op">@@@@@@@@@@</span></span>
<span id="cb1-15"><a href="#cb1-15" aria-hidden="true"></a>INVALID <span class="op">@</span> <span class="op">@</span> <span class="op">@@</span> <span class="op">@@@@</span></span></code></pre></div>
<p>The pattern you come up with should match strings of any length that follow the doubling sequence, and should reject strings of any length that fail to follow it all the way to their end. The final “number” in a string will always be followed by a space, otherwise it won’t have been terminated and shouldn’t match.</p>
<p>Before you turn the page…</p>
<p><strong>Be sure to rule out the strings that do not express the sequence.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>Let’s start with the solution, then explain why it works.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>pat <span class="op">=</span> <span class="vs">r&quot;^(((@+) )(?=\3\3 ))+(\3\3 )$&quot;</span></span></code></pre></div>
<p>What we do here is several steps:</p>
<p>First, make sure we are beginning at the start of the string (‘^’). This is where ‘s4’ failed; it doubles as a suffix, but we are required to start at the beginning.</p>
<p>Second, match at least one <code>@</code> symbol, up to however many occur in a row. After that group of <code>@</code> symbols, we have a space that is not part of the group.</p>
<p>Third, <em>lookahead</em> to a pattern that has twice as many <code>@</code> symbols as the group we last saw. I spelled that as <code>\3\3</code>, which feels intuitive, but you could likewise spell it as <code>\3{2}</code> to mean the same thing.</p>
<p>Fourth, and finally, after all those repetitions of lookaheads and groups, collect the same pattern as the lookahead just before the end of the string. We want to have the entire sequence in <code>match.group()</code>, not to leave off the last “number.”</p>
</div>
</section>
</body>
</html>
