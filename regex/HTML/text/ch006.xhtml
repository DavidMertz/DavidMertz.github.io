<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch006.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    </p>
</div>


<section id="wildcard-scope" class="level2" data-number="5.1">
<h2 data-number="5.1">Wildcard Scope</h2>
<p>A powerful element of Python regular expression syntax—shared by many other regex engines—is the option of creating either “greedy” or “non-greedy” matches. The former matches as much as it possibly can, as long as it finds the later part of a pattern. The latter matches as little as it possibly can to reach the next part of a pattern.</p>
<p>Suppose you have these two regular expressions:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a>pat1 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;x.*y&#39;</span>)    <span class="co"># greedy</span></span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>pat2 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;x.*?y&#39;</span>)   <span class="co"># non-greedy</span></span></code></pre></div>
<p>And also the following block of text that you want to match. You can think of it as a sort of <em>lorem ipsum</em> that only has ‘X’ words, if you will.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a>txt <span class="op">=</span> <span class="st">&quot;&quot;&quot;</span></span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a><span class="st">xenarthral xerically xenomorphically xebec xenomania</span></span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a><span class="st">xenogenic xenogeny xenophobically xenon xenomenia</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a><span class="st">xylotomy xenogenies xenografts xeroxing xenons xanthous</span></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="st">xenoglossy xanthopterins xenoglossy xeroxed xenophoby</span></span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="st">xenoglossies xanthoxyls xenoglossias xenomorphically</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="st">xeroxes xanthopterin xebecs xenodochiums xenodochium</span></span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="st">xylopyrography xanthopterines xerochasy xenium xenic</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="st">&quot;&quot;&quot;</span></span></code></pre></div>
<p>You’d like to match all and only words that start with ‘X’ and end with ‘Y’. What pattern makes sense to use, and why? The code to find the words can look like:</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a>xy_words <span class="op">=</span> re.findall(_pat, txt)</span></code></pre></div>
<p>Before you turn the page…</p>
<p><strong>Think about what each pattern will match.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>Did this puzzle fool you? Welcome to the world of regular expressions! Both <code>pat1</code> and <code>pat2</code> match the wrong thing, but in different ways.</p>
<p>If you liked <code>pat1</code>, you’ve greedily matched too much. The ‘y’ might occur in later words (per line), and the match won’t end until the last ‘y’ on a line.</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> match <span class="kw">in</span> re.findall(pat1, txt):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>...     <span class="bu">print</span>(match)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>...</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>xenarthral xerically xenomorphically</span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a>xenogenic xenogeny xenophobically</span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a>xylotomy</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a>xenoglossy xanthopterins xenoglossy xeroxed xenophoby</span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a>xenoglossies xanthoxyls xenoglossias xenomorphically</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a>xylopyrography xanthopterines xerochasy</span></code></pre></div>
<p>On each line, the greedy pattern started at the first ‘x’, which is often not what you want. Moreover, most lines match multiple words, with only the line beginning with ‘xylotomy’ happening to be the isolated word we actually want. The line that begins with ‘xeroxes’ is not matched at all, which is what we want.</p>
<p>If you liked <code>pat2</code> you often get words, but at other times either too much <em>or too little</em> might be matched. For example, if ‘xy’ occurs in a longer word, either as a prefix or in the middle, it can also match.</p>
<div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> match <span class="kw">in</span> re.findall(pat2, txt):</span>
<span id="cb5-2"><a href="#cb5-2" aria-hidden="true"></a>...     <span class="bu">print</span>(match)</span>
<span id="cb5-3"><a href="#cb5-3" aria-hidden="true"></a>...</span>
<span id="cb5-4"><a href="#cb5-4" aria-hidden="true"></a>...</span>
<span id="cb5-5"><a href="#cb5-5" aria-hidden="true"></a>xenarthral xerically</span>
<span id="cb5-6"><a href="#cb5-6" aria-hidden="true"></a>xenomorphically</span>
<span id="cb5-7"><a href="#cb5-7" aria-hidden="true"></a>xenogenic xenogeny</span>
<span id="cb5-8"><a href="#cb5-8" aria-hidden="true"></a>xenophobically</span>
<span id="cb5-9"><a href="#cb5-9" aria-hidden="true"></a>xy</span>
<span id="cb5-10"><a href="#cb5-10" aria-hidden="true"></a>xenoglossy</span>
<span id="cb5-11"><a href="#cb5-11" aria-hidden="true"></a>xanthopterins xenoglossy</span>
<span id="cb5-12"><a href="#cb5-12" aria-hidden="true"></a>xeroxed xenophoby</span>
<span id="cb5-13"><a href="#cb5-13" aria-hidden="true"></a>xenoglossies xanthoxy</span>
<span id="cb5-14"><a href="#cb5-14" aria-hidden="true"></a>xenoglossias xenomorphically</span>
<span id="cb5-15"><a href="#cb5-15" aria-hidden="true"></a>xy</span>
<span id="cb5-16"><a href="#cb5-16" aria-hidden="true"></a>xanthopterines xerochasy</span></code></pre></div>
<p>By being non-greedy, we stop when the first ‘y’ is encountered, but as you see, that still is not quite what we want.</p>
<p>What we actually need to focus on for this task is the <em>word boundaries</em>. Things that are not lowercase letters cannot be part of matches. In this simple case, non-letters are all spaces and newlines, but other characters might occur in other texts.</p>
<p>We can be greedy to avoid matching prefixes or infixes, but we also want to ignore non-letter characters.</p>
<div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> pat3 <span class="op">=</span> re.<span class="bu">compile</span>(<span class="vs">r&#39;x[a-z]*y&#39;</span>)</span>
<span id="cb6-2"><a href="#cb6-2" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="cf">for</span> match <span class="kw">in</span> re.findall(pat3, txt):</span>
<span id="cb6-3"><a href="#cb6-3" aria-hidden="true"></a>...     <span class="bu">print</span>(match)</span>
<span id="cb6-4"><a href="#cb6-4" aria-hidden="true"></a>...</span>
<span id="cb6-5"><a href="#cb6-5" aria-hidden="true"></a>xerically</span>
<span id="cb6-6"><a href="#cb6-6" aria-hidden="true"></a>xenomorphically</span>
<span id="cb6-7"><a href="#cb6-7" aria-hidden="true"></a>xenogeny</span>
<span id="cb6-8"><a href="#cb6-8" aria-hidden="true"></a>xenophobically</span>
<span id="cb6-9"><a href="#cb6-9" aria-hidden="true"></a>xylotomy</span>
<span id="cb6-10"><a href="#cb6-10" aria-hidden="true"></a>xenoglossy</span>
<span id="cb6-11"><a href="#cb6-11" aria-hidden="true"></a>xenoglossy</span>
<span id="cb6-12"><a href="#cb6-12" aria-hidden="true"></a>xenophoby</span>
<span id="cb6-13"><a href="#cb6-13" aria-hidden="true"></a>xanthoxy</span>
<span id="cb6-14"><a href="#cb6-14" aria-hidden="true"></a>xenomorphically</span>
<span id="cb6-15"><a href="#cb6-15" aria-hidden="true"></a>xylopyrography</span>
<span id="cb6-16"><a href="#cb6-16" aria-hidden="true"></a>xerochasy</span></code></pre></div>
<p>Everything we matched, anywhere on each line, had an ‘x’, some other letters (perhaps including ‘x’s or ’y’s along the way), then a ’y’. Whatever came after each match was a non-letter character.</p>
</div>
</section>
</body>
</html>
