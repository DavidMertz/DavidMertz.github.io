<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="en-US">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <title>ch021.xhtml</title>
  <style>
pre > code.sourceCode { white-space: pre; position: relative; }
pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }
pre > code.sourceCode > span:empty { height: 1.2em; }
code.sourceCode > span { color: inherit; text-decoration: inherit; }
div.sourceCode { margin: 1em 0; }
pre.sourceCode { margin: 0; }
@media screen {
div.sourceCode { overflow: auto; }
}
@media print {
pre > code.sourceCode { white-space: pre-wrap; }
pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}
pre.numberSource code
  { counter-reset: source-line 0; }
pre.numberSource code > span
  { position: relative; left: -4em; counter-increment: source-line; }
pre.numberSource code > span > a:first-child::before
  { content: counter(source-line);
    position: relative; left: -1em; text-align: right; vertical-align: baseline;
    border: none; display: inline-block;
    -webkit-touch-callout: none; -webkit-user-select: none;
    -khtml-user-select: none; -moz-user-select: none;
    -ms-user-select: none; user-select: none;
    padding: 0 4px; width: 4em;
    color: #aaaaaa;
  }
pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }
div.sourceCode
  {   }
@media screen {
pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }
}
code span.al { color: #ff0000; font-weight: bold; } /* Alert */
code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */
code span.at { color: #7d9029; } /* Attribute */
code span.bn { color: #40a070; } /* BaseN */
code span.bu { } /* BuiltIn */
code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */
code span.ch { color: #4070a0; } /* Char */
code span.cn { color: #880000; } /* Constant */
code span.co { color: #60a0b0; font-style: italic; } /* Comment */
code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */
code span.do { color: #ba2121; font-style: italic; } /* Documentation */
code span.dt { color: #902000; } /* DataType */
code span.dv { color: #40a070; } /* DecVal */
code span.er { color: #ff0000; font-weight: bold; } /* Error */
code span.ex { } /* Extension */
code span.fl { color: #40a070; } /* Float */
code span.fu { color: #06287e; } /* Function */
code span.im { } /* Import */
code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */
code span.kw { color: #007020; font-weight: bold; } /* Keyword */
code span.op { color: #666666; } /* Operator */
code span.ot { color: #007020; } /* Other */
code span.pp { color: #bc7a00; } /* Preprocessor */
code span.sc { color: #4070a0; } /* SpecialChar */
code span.ss { color: #bb6688; } /* SpecialString */
code span.st { color: #4070a0; } /* String */
code span.va { color: #19177c; } /* Variable */
code span.vs { color: #4070a0; } /* VerbatimString */
code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */
  </style>
  <link rel="stylesheet" type="text/css" href="../styles/stylesheet1.css" />
</head>
<body onload="solution()">
<div id="toc_container">
<p class="toc_title"><a href="../../index.html">
    The Puzzling Quirks of Regular Expressions</a></p>

<ol class="toc_list">
	<li><a href="ch001.xhtml">Acknowledgments</a></li>
	<li><a href="ch002.xhtml">Rights of (Wo)Man</a></li>
	<li><a href="ch003.xhtml">Credits</a></li>
	<li><a href="ch004.xhtml">Preface</a></li>
	<li><a href="ch005.xhtml">Quantifiers and Special Sub-Patterns</a>
	<ol class="toc">
		<li><a href="ch006.xhtml">Wildcard Scope</a></li>
		<li><a href="ch007.xhtml">Words and Sequences</a></li>
		<li><a href="ch008.xhtml">Endpoint Classes</a></li>
		<li><a href="ch009.xhtml">A Configuration Format</a></li>
		<li><a href="ch010.xhtml">The Human Genome</a></li></ol></li>
		<li><a href="ch011.xhtml">Pitfalls and Sand in the Gears</a>
	<ol class="toc">
		<li><a href="ch012.xhtml">Catastrophic Backtracking</a></li>
		<li><a href="ch013.xhtml">Playing Dominoes</a></li>
		<li><a href="ch014.xhtml">Advanced Dominoes</a></li>
		<li><a href="ch015.xhtml">Sensor Art</a></li></ol></li>
		<li><a href="ch016.xhtml">Creating Functions using Regexen</a>
	<ol class="toc">
		<li><a href="ch017.xhtml">Reimplementing str.count()</a></li>
		<li><a href="ch018.xhtml">Reimplementing str.count() (stricter)</a></li>
		<li><a href="ch019.xhtml">Finding a Name for a Function</a></li>
		<li><a href="ch020.xhtml">Playing Poker (Part 1)</a></li>
		<li><a href="ch021.xhtml">Playing Poker (Part 2)</a></li>
		<li><a href="ch022.xhtml">Playing Poker (Part 3)</a></li>
		<li><a href="ch023.xhtml">Playing Poker (Part 4)</a></li>
		<li><a href="ch024.xhtml">Playing Poker (Part 5)</a></li></ol></li>
		<li><a href="ch025.xhtml">Easy, Difficult, and Impossible Tasks</a>
	<ol class="toc">
		<li><a href="ch026.xhtml">Identifying Equal Counts</a></li>
		<li><a href="ch027.xhtml">Matching Before Duplicate Words</a></li>
		<li><a href="ch028.xhtml">Testing an IPv4 Address</a></li>
		<li><a href="ch029.xhtml">Matching a Numeric Sequence</a></li>
		<li><a href="ch030.xhtml">Matching the Fibonacci Sequence</a></li>
		<li><a href="ch031.xhtml">Matching the Prime Numbers</a></li>
		<li><a href="ch032.xhtml">Matching Relative Prime Numbers</a></li>
	</ol>
	</li>
</ol>
<figure>
<img src="../media/file17.png" alt="" /><figcaption>Basket_Verso</figcaption>
</figure>
</div>

<script>
function solution() {
  var x = document.getElementById("solution");
  if (x.style.display === "none") {
    x.style.display = "block";
  } else {
    x.style.display = "none";
  }
}
</script>

<div id="donation">
    <p><b>Support the author!</b><br/>
    <a href="https://www.lulu.com/search?q=Puzzling+Quirks">Lulu Editions</a><br/>
    <a href="https://www.paypal.com/donate?hosted_button_id=WSUSCPKT5PE9L">
        Paypal Donation</a><br/>
    <a href="https://gnosis.cx/publish/">Other Publications</a><br/>
    </p>
</div>


<section id="playing-poker-part-2" class="level2" data-number="7.5">
<h2 data-number="7.5">Playing Poker (Part 2)</h2>
<p>In the last puzzle, you converted “poker hands” from ASCII to Unicode suit symbols, and you also made sure that hands are listed in canonical descending card order.</p>
<p>For this puzzle, you want to start using regular expressions to figure out whether hands belong to various kinds. Here’s an obvious trick we can use as a shortcut:</p>
<div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true"></a><span class="kw">def</span> is_straight_flush(hand):</span>
<span id="cb1-2"><a href="#cb1-2" aria-hidden="true"></a>    <span class="cf">return</span> is_straight(hand) <span class="kw">and</span> is_flush(hand)</span></code></pre></div>
<p>For this puzzle, you wish to write the functions <code>is_flush(hand)</code> and <code>is_straight(hand)</code>, continuing with the assumption that hands are represented in the same manner as the last puzzle (including the cards being in descending order). Feel free to use the <code>prettify()</code> function you wrote if it makes entering test cases easier.</p>
<p>Before you turn the page…</p>
<p><strong>Large buildings are built from small bricks.</strong></p>
<p><img src="../media/file4.svg" /></p>
<button onclick="solution()">Show/Hide Solution</button>
<div id="solution">

<p>Identifying a flush is somewhat easier. Moreover, if we are clever, we can add two features to the function not specifically required in the puzzle. We can make it work identically with the ASCII codes like ‘S’ for spaces and ‘H’ for hearts simultaneously with the Unicode special symbols.</p>
<p>But while we are creating the function, we can also return extra “truthy” information in the return value. Namely, if it <em>is</em> a flush, let’s return the suit also.</p>
<div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> is_flush(hand):</span>
<span id="cb2-2"><a href="#cb2-2" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(<span class="vs">r&#39;^.(.)(.*\1)</span><span class="sc">{4}</span><span class="vs">$&#39;</span>, hand)</span>
<span id="cb2-3"><a href="#cb2-3" aria-hidden="true"></a>...     <span class="cf">return</span> match.group(<span class="dv">1</span>) <span class="cf">if</span> match <span class="cf">else</span> <span class="va">False</span></span>
<span id="cb2-4"><a href="#cb2-4" aria-hidden="true"></a></span>
<span id="cb2-5"><a href="#cb2-5" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_flush(<span class="st">&#39;J♣ T♣ 9♣ 8♣ 7♣&#39;</span>)</span>
<span id="cb2-6"><a href="#cb2-6" aria-hidden="true"></a><span class="co">&#39;♣&#39;</span></span>
<span id="cb2-7"><a href="#cb2-7" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_flush(<span class="st">&#39;J♦ 9♦ 6♦ 5♦ 2♦&#39;</span>)</span>
<span id="cb2-8"><a href="#cb2-8" aria-hidden="true"></a><span class="co">&#39;♦&#39;</span></span>
<span id="cb2-9"><a href="#cb2-9" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_flush(<span class="st">&#39;J♦ 9♥ 6♦ 5♦ 2♦&#39;</span>)</span>
<span id="cb2-10"><a href="#cb2-10" aria-hidden="true"></a><span class="va">False</span></span>
<span id="cb2-11"><a href="#cb2-11" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_flush(<span class="st">&#39;JD 9H 6D 5D 2D&#39;</span>)</span>
<span id="cb2-12"><a href="#cb2-12" aria-hidden="true"></a><span class="va">False</span></span>
<span id="cb2-13"><a href="#cb2-13" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_flush(<span class="st">&#39;JD 9D 6D 5D 2D&#39;</span>)</span>
<span id="cb2-14"><a href="#cb2-14" aria-hidden="true"></a><span class="co">&#39;D&#39;</span></span></code></pre></div>
<p>For checking for straights, let’s add a similar bit of extra information in the return value. Obviously, if the hand is not a straight, we should return False. But if it is one, we can return the high card number for later use. Those are all “truthy” values (like all strings).</p>
<div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> is_straight(hand):</span>
<span id="cb3-2"><a href="#cb3-2" aria-hidden="true"></a>...     pat <span class="op">=</span> <span class="vs">r&#39;[ SHDC\u2660\u2665\u2666\u2663]&#39;</span></span>
<span id="cb3-3"><a href="#cb3-3" aria-hidden="true"></a>...     h <span class="op">=</span> re.sub(pat, <span class="st">&#39;&#39;</span>, hand)</span>
<span id="cb3-4"><a href="#cb3-4" aria-hidden="true"></a>...     match <span class="op">=</span> re.search(h, <span class="st">&#39;AKQJT98765432&#39;</span>) </span>
<span id="cb3-5"><a href="#cb3-5" aria-hidden="true"></a>...     <span class="cf">return</span> h[<span class="dv">0</span>] <span class="cf">if</span> match <span class="cf">else</span> <span class="va">False</span></span></code></pre></div>
<p>As with the first function, we might as well be friendly in accepting the ASCII version of suits, even though they could always be improved with <code>prettify()</code> if necessary. The pattern looks for everything that is a suit character or a space, and strips it out to create a simplified “hand.”</p>
<p>With the simplified hand of just “numbers,” we know that any straight must be a substring of the run of all numbers. We do not check again that the length is 5, trusting that other functions have validated this. We could easily add that if we wanted, of course.</p>
<p>At this point, you might consider a richer implementation of <code>is_straight_flush()</code>. Perhaps this:</p>
<div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> <span class="kw">def</span> is_straight_flush(hand):</span>
<span id="cb4-2"><a href="#cb4-2" aria-hidden="true"></a>...     s <span class="op">=</span> is_straight(hand)</span>
<span id="cb4-3"><a href="#cb4-3" aria-hidden="true"></a>...     f <span class="op">=</span> is_flush(hand)</span>
<span id="cb4-4"><a href="#cb4-4" aria-hidden="true"></a>...     <span class="cf">return</span> s<span class="op">+</span>f <span class="cf">if</span> s <span class="kw">and</span> f <span class="cf">else</span> <span class="va">False</span></span>
<span id="cb4-5"><a href="#cb4-5" aria-hidden="true"></a></span>
<span id="cb4-6"><a href="#cb4-6" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_straight_flush(<span class="st">&#39;JD TD 9D 8D 7D&#39;</span>)</span>
<span id="cb4-7"><a href="#cb4-7" aria-hidden="true"></a><span class="co">&#39;JD&#39;</span></span>
<span id="cb4-8"><a href="#cb4-8" aria-hidden="true"></a><span class="op">&gt;&gt;&gt;</span> is_straight_flush(<span class="st">&#39;JD TD 9H 8D 7D&#39;</span>)</span>
<span id="cb4-9"><a href="#cb4-9" aria-hidden="true"></a><span class="va">False</span></span></code></pre></div>
<!-- blank verso page -->

</div>
</section>
</body>
</html>
